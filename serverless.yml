# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: market-watch

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-plugin-warmup

custom:
  warmup:
    default: true
    folderName: '_warmup' # Name of the folder created for the generated warmup
    cleanFolder: false
    memorySize: 256
    name: 'market-watch-warmup'
    schedule: rate(10 minutes)
    timeout: 20
    prewarm: true

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: java8
  timeout: 600
  environment:
    JWT_SECRET: ${file(./config.${self:provider.stage}.json):jwtSecret}
    APP_CLIENT_ID: ${file(./config.${self:provider.stage}.json):appClientId}
    APP_CLIENT_SECRET: ${file(./config.${self:provider.stage}.json):appClientSecret}
    REGION: ${opt:region, self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
        - Fn::Join:
            - ':'
            - - arn:aws:lambda
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - function:${self:service}-${opt:stage, self:provider.stage}-*

package:
  artifact: target/market-watch-1.1.2.jar

functions:
  login:
    handler: com.eve.marketwatch.api.LoginHandler
    events:
    - http:
        path: login
        method: get
        cors: true
  deleteUser:
    handler: com.eve.marketwatch.api.DeleteUserHandler
    events:
    - http:
        path: user
        method: delete
        cors: true
        authorizer: publicAuthorizer

  addItemWatch:
    handler: com.eve.marketwatch.api.AddItemWatchHandler
    events:
    - http:
        path: itemwatch
        method: put
        cors: true
        authorizer: publicAuthorizer
  getItemWatches:
    handler: com.eve.marketwatch.api.GetItemWatchesHandler
    events:
      - http:
          path: itemwatch
          method: get
          cors: true
          authorizer: publicAuthorizer
#  todo: merge deleteItemWatchHandlers to one accepting the id/all via a query param
  deleteItemWatch:
    handler: com.eve.marketwatch.api.DeleteItemWatchHandler
    events:
      - http:
          path: itemwatch/{id}
          method: delete
          cors: true
          authorizer: publicAuthorizer
  deleteItemWatches:
    handler: com.eve.marketwatch.api.DeleteItemWatchesHandler
    events:
      - http:
          path: itemwatch
          method: delete
          cors: true
          authorizer: publicAuthorizer
  searchItem:
    handler: com.eve.marketwatch.api.ItemSearchHandler
    events:
    - http:
        path: search
        method: get
        cors: true
        authorizer: publicAuthorizer
  searchStructure:
#    todo: merge me with searchItem, e.g. one search handler that can be modified with a query param
    handler: com.eve.marketwatch.api.StructureSearchHandler
    events:
      - http:
          path: search-structure
          method: get
          cors: true
          authorizer: publicAuthorizer
  getStructureDetails:
    #    todo: merge me with searchItem, e.g. one search handler that can be modified with a query param
    handler: com.eve.marketwatch.api.StructureDetailsHandler
    events:
      - http:
          path: structure/id
          method: get
          cors: true
          authorizer: publicAuthorizer
  getMyMarkets:
    handler: com.eve.marketwatch.api.GetMyMarketsHandler
    events:
      - http:
          path: markets
          method: get
          cors: true
          authorizer: publicAuthorizer

  countMarkets:
    handler: com.eve.marketwatch.api.CountMarkets
    events:
      - http:
          path: admin/countMarkets
          method: get
          authorizer: privateAuthorizer
    warmup: false
  bulkMail:
    handler: com.eve.marketwatch.api.BulkNotificationHandler
    events:
      - http:
          path: admin/bulk
          method: post
          authorizer: privateAuthorizer
    warmup: false
  resetWatches:
    handler: com.eve.marketwatch.api.ResetWatchesHandler
    events:
      - http:
          path: admin/resetWatches
          method: put
          authorizer: privateAuthorizer
    warmup: false

  updateDisabledWatches:
    handler: com.eve.marketwatch.jobs.UpdateDisabledWatches
    events:
      - schedule: cron(10 * * * ? *)
  parseMarket:
    handler: com.eve.marketwatch.jobs.MarketParser
    events:
      #      when you update the cron schedules make sure to adjust WatchChecker#MISSING_DELAY accordingly
      - schedule: cron(30 * * * ? *)
    warmup: false
  checkWatches:
    handler: com.eve.marketwatch.jobs.WatchChecker
    events:
      #      when you update the cron schedules make sure to adjust WatchChecker#MISSING_DELAY accordingly
      - schedule: cron(35 * * * ? *)
    warmup: false
  createNotification:
    handler: com.eve.marketwatch.jobs.NotificationCreater
    events:
      - schedule: cron(40 * * * ? *)
    warmup: false
  sendMails:
    handler: com.eve.marketwatch.jobs.MailSender
    events:
      - schedule: rate(1 minute)
    warmup: false
    environment:
      MAIL_CHARACTER_ID: ${file(./config.${self:provider.stage}.json):adminCharacterId}
      MAIL_CLIENT_ID: ${file(./config.${self:provider.stage}.json):mailClientId}
      MAIL_CLIENT_SECRET: ${file(./config.${self:provider.stage}.json):mailClientSecret}
      MAIL_REFRESH_TOKEN: ${file(./config.${self:provider.stage}.json):mailRefreshToken}

  publicAuthorizer:
    handler: com.eve.marketwatch.api.Authorizer
  privateAuthorizer:
    handler: com.eve.marketwatch.api.Authorizer
    warmup: false
    environment:
      ADMIN_CHARACTER_ID: ${file(./config.${self:provider.stage}.json):adminCharacterId}


